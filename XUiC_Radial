[Preserve]
public class XUiC_Radial : XUiController
{
	// Token: 0x06005B55 RID: 23381 RVA: 0x00281D94 File Offset: 0x0027FF94
	public override void Init()
	{
		base.Init();
		XUiController[] childrenById = base.GetChildrenById("radial_entry", null);
		this.menuItem = new List<XUiC_RadialEntry>();
		for (int i = 0; i < childrenById.Length; i++)
		{
			this.menuItem.Add(childrenById[i] as XUiC_RadialEntry);
		}
		this.menuItemState = new bool[this.menuItem.Count];
		for (int j = 0; j < this.menuItem.Count; j++)
		{
			this.menuItem[j].OnHover += this.XUiC_Radial_OnHover;
			this.menuItem[j].ViewComponent.IsVisible = false;
			this.menuItem[j].MenuItemIndex = j;
			this.menuItemState[j] = false;
		}
		this.selectionText = (base.GetChildById("selection").ViewComponent as XUiV_Label);
	}

	// Token: 0x06005B56 RID: 23382 RVA: 0x00281E76 File Offset: 0x00280076
	private void XUiC_Radial_OnPress(XUiC_RadialEntry _sender)
	{
		this.selectedIndex = _sender.MenuItemIndex;
		this.CallContextAction();
	}

	// Token: 0x06005B57 RID: 23383 RVA: 0x00281E8C File Offset: 0x0028008C
	private void XUiC_Radial_OnHover(XUiController _sender, bool _isOver)
	{
		XUiC_RadialEntry xuiC_RadialEntry = (XUiC_RadialEntry)_sender;
		if (_isOver)
		{
			this.SelectionEffect(xuiC_RadialEntry, true);
			this.selectedIndex = xuiC_RadialEntry.MenuItemIndex;
			return;
		}
		this.SelectionEffect(xuiC_RadialEntry, false);
		this.selectedIndex = int.MinValue;
	}

	// Token: 0x06005B58 RID: 23384 RVA: 0x00281ECB File Offset: 0x002800CB
	public void Open()
	{
		this.openTime = Time.time;
		this.isOpenRequested = true;
	}

	// Token: 0x06005B59 RID: 23385 RVA: 0x00281EE0 File Offset: 0x002800E0
	public override void OnOpen()
	{
		base.OnOpen();
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			this.menuItem[i].ViewComponent.IsVisible = this.menuItemState[i];
		}
		if (!this.showingCallouts)
		{
			this.showingCallouts = true;
			base.xui.calloutWindow.ClearCallouts(XUiC_GamepadCalloutWindow.CalloutType.Menu);
			base.xui.calloutWindow.AddCallout(this.radialButtonIsLeftSide(base.xui.playerUI.playerInput) ? UIUtils.ButtonIcon.RightStick : UIUtils.ButtonIcon.LeftStick, "igcoRadialHighlight", XUiC_GamepadCalloutWindow.CalloutType.Menu);
			base.xui.calloutWindow.AddCallout(this.selectionControllerButton, "igcoRadialSelect", XUiC_GamepadCalloutWindow.CalloutType.Menu);
			base.xui.calloutWindow.EnableCallouts(XUiC_GamepadCalloutWindow.CalloutType.Menu, 0f);
		}
		if (PlatformManager.NativePlatform.Input.CurrentInputStyle != PlayerInputManager.InputStyle.Keyboard)
		{
			base.xui.playerUI.entityPlayer.SetControllable(false);
			CursorControllerAbs.SetCursor(CursorControllerAbs.ECursorType.None);
		}
	}

public override void OnClose()
	{
		base.OnClose();
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			this.SelectionEffect(this.menuItem[i], false);
		}
		this.selectedIndex = int.MinValue;
		this.context = null;
		this.commandHandler = null;
		this.validCheckDelegate = null;
		base.xui.calloutWindow.DisableCallouts(XUiC_GamepadCalloutWindow.CalloutType.Menu);
		this.showingCallouts = false;
		this.isOpenRequested = false;
		base.xui.playerUI.entityPlayer.SetControllable(true);
		CursorControllerAbs.SetCursor(CursorControllerAbs.ECursorType.Default);
	}

	// Token: 0x06005B5B RID: 23387 RVA: 0x00282073 File Offset: 0x00280273
	public override bool AlwaysUpdate()
	{
		return true;
	}

	// Token: 0x06005B5C RID: 23388 RVA: 0x00282078 File Offset: 0x00280278
	public override void Update(float _dt)
	{
		base.Update(_dt);
		if (!this.isOpenRequested)
		{
			return;
		}
		bool flag = Time.time - this.openTime >= this.displayDelay;
		if (flag && !base.IsOpen)
		{
			if (this.validCheckDelegate != null && !this.validCheckDelegate(this, this.context))
			{
				this.Close();
				return;
			}
			base.xui.playerUI.windowManager.Open("radial", true, true, true);
		}
		PlayerActionsLocal playerInput = base.xui.playerUI.playerInput;
		if (!this.radialButtonPressed(playerInput))
		{
			if (this.mCurrentlySelectedEntry != null)
			{
				this.XUiC_Radial_OnPress(this.mCurrentlySelectedEntry);
			}
			else
			{
				if (!flag)
				{
					if (this.hasSpecialActionPriorToRadialVisibility)
					{
						if (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift))
						{
							this.selectedIndex = -2;
						}
						else
						{
							this.selectedIndex = -1;
						}
					}
					else if (this.selectedIndex == -2147483648)
					{
						for (int i = 0; i < this.menuItemState.Length; i++)
						{
							if (this.menuItemState[i])
							{
								this.selectedIndex = i;
								break;
							}
						}
					}
				}
				if (this.selectedIndex != -2147483648 && !GameManager.Instance.IsPaused())
				{
					this.CallContextAction();
				}
				else
				{
					this.Close();
				}
			}
		}
		if (base.IsOpen && this.radialButtonPressed(playerInput))
		{
			this.CalculateSelectionFromController(playerInput);
		}
	}

private bool radialButtonPressed(PlayerActionsLocal _actionSet)
	{
		return _actionSet.Activate.IsPressed || _actionSet.PermanentActions.Activate.IsPressed || _actionSet.Reload.IsPressed || _actionSet.PermanentActions.Reload.IsPressed || _actionSet.ToggleFlashlight.IsPressed || _actionSet.PermanentActions.ToggleFlashlight.IsPressed || _actionSet.Inventory.IsPressed || _actionSet.VehicleActions.Inventory.IsPressed || _actionSet.PermanentActions.Inventory.IsPressed;
	}

	// Token: 0x06005B5E RID: 23390 RVA: 0x00282278 File Offset: 0x00280478
	private bool radialButtonIsLeftSide(PlayerActionsLocal _actionSet)
	{
		return _actionSet.ToggleFlashlight.IsPressed || _actionSet.PermanentActions.ToggleFlashlight.IsPressed;
	}

	// Token: 0x06005B5F RID: 23391 RVA: 0x0028229C File Offset: 0x0028049C
	private void CallContextAction()
	{
		if (this.selectedIndex == -2147483648)
		{
			this.Close();
			return;
		}
		if (GameManager.Instance == null || GameManager.Instance.World == null)
		{
			this.Close();
			return;
		}
		if (this.commandHandler == null)
		{
			this.Close();
			return;
		}
		if (this.validCheckDelegate != null && !this.validCheckDelegate(this, this.context))
		{
			this.Close();
			return;
		}
		int commandIndex;
		if (this.selectedIndex < 0)
		{
			commandIndex = this.selectedIndex;
		}
		else
		{
			if (!this.menuItemState[this.selectedIndex])
			{
				this.Close();
				return;
			}
			commandIndex = this.menuItem[this.selectedIndex].CommandIndex;
		}
		XUiC_Radial.RadialContextAbs radialContextAbs = this.context;
		XUiC_Radial.CommandHandlerDelegate commandHandlerDelegate = this.commandHandler;
		this.Close();
		commandHandlerDelegate(this, commandIndex, radialContextAbs);
	}

private void Close()
	{
		if (GameManager.Instance == null)
		{
			Log.Out("GetGameManager is null");
		}
		if (base.xui.playerUI.windowManager == null)
		{
			Log.Out("GetWindowManager is null");
		}
		this.isOpenRequested = false;
		base.xui.playerUI.windowManager.Close("radial");
	}

	// Token: 0x06005B61 RID: 23393 RVA: 0x002823D4 File Offset: 0x002805D4
	public void ResetRadialEntries()
	{
		for (int i = 0; i < this.menuItemState.Length; i++)
		{
			this.menuItemState[i] = false;
			this.menuItem[i].SetHighlighted(false);
		}
	}

	// Token: 0x06005B62 RID: 23394 RVA: 0x00282410 File Offset: 0x00280610
	public void SetCommonData(UIUtils.ButtonIcon _controllerButtonForSelect, XUiC_Radial.CommandHandlerDelegate _commandHandlerFunc, XUiC_Radial.RadialContextAbs _context = null, int _preSelectedCommandIndex = -1, bool _hasSpecialActionPriorToRadialVisibility = false, XUiC_Radial.RadialStillValidDelegate _radialValidityCallback = null)
	{
		this.updateRadialButtonPositions();
		int num = this.currentEnabledEntriesCount();
		this.context = _context;
		this.selectionControllerButton = _controllerButtonForSelect;
		this.commandHandler = _commandHandlerFunc;
		this.validCheckDelegate = _radialValidityCallback;
		this.hasSpecialActionPriorToRadialVisibility = _hasSpecialActionPriorToRadialVisibility;
		this.DefaultSelect();
		this.selectedIndex = int.MinValue;
		if (_preSelectedCommandIndex >= 0)
		{
			for (int i = 0; i < this.menuItem.Count; i++)
			{
				if (this.menuItemState[i] && this.menuItem[i].CommandIndex == _preSelectedCommandIndex)
				{
					this.selectedIndex = i;
				}
			}
		}
		if (num == 0 || num == 1)
		{
			this.selectedIndex = 0;
			if (this.hasSpecialActionPriorToRadialVisibility)
			{
				if (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift))
				{
					this.selectedIndex = -2;
				}
				else
				{
					this.selectedIndex = -1;
				}
			}
			if (num == 1 || this.selectedIndex < 0)
			{
				this.CallContextAction();
				return;
			}
			this.Close();
		}
		for (int j = 0; j < this.menuItem.Count; j++)
		{
			this.menuItem[j].ViewComponent.IsVisible = (j < num);
			this.menuItem[j].ViewComponent.Enabled = (j < num);
		}
	}

private void DefaultSelect()
	{
		this.SetHovered(null);
		this.ResetIconsScale();
	}

	// Token: 0x06005B64 RID: 23396 RVA: 0x00282554 File Offset: 0x00280754
	private void CalculateSelectionFromController(PlayerActionsLocal _actionSet)
	{
		Vector2 from = this.radialButtonIsLeftSide(_actionSet) ? _actionSet.Look.Value : _actionSet.Move.Value;
		if (from.magnitude < 0.75f)
		{
			this.SetHovered(null);
			return;
		}
		float num = 361f;
		XUiC_RadialEntry xuiC_RadialEntry = null;
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			if (this.menuItemState[i])
			{
				XUiC_RadialEntry xuiC_RadialEntry2 = this.menuItem[i];
				Vector3 localPosition = xuiC_RadialEntry2.ViewComponent.UiTransform.localPosition;
				Vector2 to = new Vector2(localPosition.x, localPosition.y);
				float num2 = Vector2.Angle(from, to);
				if (num2 < num)
				{
					num = num2;
					xuiC_RadialEntry = xuiC_RadialEntry2;
				}
			}
		}
		if (xuiC_RadialEntry != null)
		{
			this.SetHovered(xuiC_RadialEntry);
		}
	}

	// Token: 0x06005B65 RID: 23397 RVA: 0x00282618 File Offset: 0x00280818
	private void ResetIconsScale()
	{
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			this.menuItem[i].ResetScale();
		}
	}

	// Token: 0x06005B66 RID: 23398 RVA: 0x0028264C File Offset: 0x0028084C
	private void SelectionEffect(XUiC_RadialEntry _entry, bool _selected)
	{
		if (!_selected)
		{
			if (_entry != null)
			{
				_entry.SetScale(1f, false);
			}
			this.selectionText.Text = "";
			return;
		}
		if (_entry != null)
		{
			if (PlatformManager.NativePlatform.Input.CurrentInputStyle != PlayerInputManager.InputStyle.Keyboard)
			{
				_entry.ViewComponent.PlayHoverSound();
			}
			_entry.SetScale(1.5f, false);
			this.selectionText.Text = _entry.SelectionText;
			return;
		}
		this.selectionText.Text = "";
	}

	// Token: 0x06005B67 RID: 23399 RVA: 0x002826CA File Offset: 0x002808CA
	private void SetHovered(XUiC_RadialEntry _newSelected)
	{
		if (this.mCurrentlySelectedEntry != _newSelected)
		{
			this.SelectionEffect(this.mCurrentlySelectedEntry, false);
			this.mCurrentlySelectedEntry = _newSelected;
			this.SelectionEffect(this.mCurrentlySelectedEntry, true);
		}
	}

private int currentEnabledEntriesCount()
	{
		int num = 0;
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			if (this.menuItemState[i])
			{
				num++;
			}
		}
		return num;
	}

	// Token: 0x06005B69 RID: 23401 RVA: 0x0028272C File Offset: 0x0028092C
	public void CreateRadialEntry(int _commandIdx, string _icon, string _atlas = "UIAtlas", string _text = "", string _selectionText = "", bool _highlighted = false)
	{
		int num = this.currentEnabledEntriesCount();
		this.menuItemState[num] = true;
		XUiC_RadialEntry xuiC_RadialEntry = this.menuItem[num];
		xuiC_RadialEntry.CommandIndex = _commandIdx;
		xuiC_RadialEntry.SetAtlas(_atlas);
		xuiC_RadialEntry.SetSprite(_icon);
		xuiC_RadialEntry.SetText(_text);
		xuiC_RadialEntry.SetHighlighted(_highlighted);
		xuiC_RadialEntry.SelectionText = _selectionText;
	}

	// Token: 0x06005B6A RID: 23402 RVA: 0x00282784 File Offset: 0x00280984
	protected void updateRadialButtonPositions()
	{
		int num = this.currentEnabledEntriesCount();
		int num2 = (num > 1) ? 50 : 0;
		float num3 = (float)Utils.FastMax(1, num);
		int num4 = 0;
		for (int i = 0; i < this.menuItem.Count; i++)
		{
			float f = -1.57079637f - 2f / num3 * (float)num4 * 3.14159274f;
			float x = ((float)(-(float)num) * 12.5f - (float)num2) * Mathf.Cos(f);
			float y = ((float)(-(float)num) * 12.5f - (float)num2) * Mathf.Sin(f);
			this.menuItem[i].ViewComponent.UiTransform.localPosition = new Vector3(x, y, 0f);
			num4++;
		}
	}

	// Token: 0x06005B6B RID: 23403 RVA: 0x0028283C File Offset: 0x00280A3C
	public static bool RadialValidSameHoldingSlotIndex(XUiC_Radial _sender, XUiC_Radial.RadialContextAbs _context)
	{
		XUiC_Radial.RadialContextHoldingSlotIndex radialContextHoldingSlotIndex = _context as XUiC_Radial.RadialContextHoldingSlotIndex;
		return radialContextHoldingSlotIndex != null && _sender.xui.playerUI.entityPlayer.inventory.holdingItemIdx == radialContextHoldingSlotIndex.ItemSlotIndex;
	}

	// Token: 0x06005B6C RID: 23404 RVA: 0x00282878 File Offset: 0x00280A78
	public void SetCurrentBlockData(WorldBase _world, Vector3i _blockPos, int _cIdx, BlockValue _blockValue, EntityAlive _entityFocusing)
	{
		this.ResetRadialEntries();
		BlockActivationCommand[] blockActivationCommands = _blockValue.Block.GetBlockActivationCommands(_world, _blockValue, _cIdx, _blockPos, _entityFocusing);
		for (int i = 0; i < blockActivationCommands.Length; i++)
		{
			if (blockActivationCommands[i].enabled)
			{
				this.CreateRadialEntry(i, string.Format("ui_game_symbol_{0}", blockActivationCommands[i].icon), "UIAtlas", "", Localization.Get("blockcommand_" + blockActivationCommands[i].text), blockActivationCommands[i].highlighted);
			}
		}
		this.SetCommonData(UIUtils.ButtonIcon.FaceButtonNorth, new XUiC_Radial.CommandHandlerDelegate(this.handleBlockCommand), new XUiC_Radial.RadialContextBlock(_blockPos, _cIdx, _blockValue, _entityFocusing, blockActivationCommands), -1, false, null);
	}

	// Token: 0x06005B6D RID: 23405 RVA: 0x0028292C File Offset: 0x00280B2C
	private void handleBlockCommand(XUiC_Radial _sender, int _commandIndex, XUiC_Radial.RadialContextAbs _context)
	{
		XUiC_Radial.RadialContextBlock radialContextBlock = _context as XUiC_Radial.RadialContextBlock;
		if (radialContextBlock == null)
		{
			return;
		}
		radialContextBlock.BlockValue.Block.OnBlockActivated(radialContextBlock.Commands[_commandIndex].text, GameManager.Instance.World, radialContextBlock.ClusterIdx, radialContextBlock.BlockPos, radialContextBlock.BlockValue, radialContextBlock.EntityFocusing);
	}

	// Token: 0x06005B6E RID: 23406 RVA: 0x0028298C File Offset: 0x00280B8C
	public void SetCurrentEntityData(WorldBase _world, Entity _entity, TileEntity _te, EntityAlive _entityFocusing)
	{
		this.ResetRadialEntries();
		Vector3i vector3i = _te.ToWorldPos();
		EntityActivationCommand[] activationCommands = _entity.GetActivationCommands(vector3i, _entityFocusing);
		for (int i = 0; i < activationCommands.Length; i++)
		{
			if (activationCommands[i].enabled)
			{
				this.CreateRadialEntry(i, string.Format("ui_game_symbol_{0}", activationCommands[i].icon), "UIAtlas", "", Localization.Get("entitycommand_" + activationCommands[i].text), false);
			}
		}
		this.SetCommonData(UIUtils.ButtonIcon.FaceButtonNorth, new XUiC_Radial.CommandHandlerDelegate(this.handleEntityCommand), new XUiC_Radial.RadialContextEntity(vector3i, _entityFocusing, _entity), -1, false, null);
	}

	// Token: 0x06005B6F RID: 23407 RVA: 0x00282A30 File Offset: 0x00280C30
	private void handleEntityCommand(XUiC_Radial _sender, int _commandIndex, XUiC_Radial.RadialContextAbs _context)
	{
		XUiC_Radial.RadialContextEntity radialContextEntity = _context as XUiC_Radial.RadialContextEntity;
		if (radialContextEntity == null)
		{
			return;
		}
		radialContextEntity.EntityFocused.OnEntityActivated(_commandIndex, radialContextEntity.BlockPos, radialContextEntity.EntityFocusing);
	}

public void SetActivatableItemData(EntityPlayerLocal _epl)
	{
		this.ResetRadialEntries();
		this.activatableItemPool.Clear();
		_epl.CollectActivatableItems(this.activatableItemPool);
		for (int i = 0; i < this.activatableItemPool.Count; i++)
		{
			this.CreateRadialEntry(i, this.activatableItemPool[i].ItemClass.GetIconName(), (this.activatableItemPool[i].Activated > 0) ? "ItemIconAtlas" : "ItemIconAtlasGreyscale", "", this.activatableItemPool[i].ItemClass.GetLocalizedItemName(), false);
		}
		this.SetCommonData(UIUtils.ButtonIcon.FaceButtonNorth, new XUiC_Radial.CommandHandlerDelegate(this.handleActivatableItemCommand), new XUiC_Radial.RadialContextHoldingSlotIndex(_epl.inventory.holdingItemIdx), -1, false, new XUiC_Radial.RadialStillValidDelegate(XUiC_Radial.RadialValidSameHoldingSlotIndex));
	}

	// Token: 0x06005B71 RID: 23409 RVA: 0x00282B30 File Offset: 0x00280D30
	private void handleActivatableItemCommand(XUiC_Radial _sender, int _commandIndex, XUiC_Radial.RadialContextAbs _context)
	{
		EntityPlayerLocal entityPlayer = _sender.xui.playerUI.entityPlayer;
		MinEventParams.CopyTo(entityPlayer.MinEventContext, MinEventParams.CachedEventParam);
		this.activatableItemPool.Clear();
		entityPlayer.CollectActivatableItems(this.activatableItemPool);
		if (this.activatableItemPool[_commandIndex].Activated == 0)
		{
			MinEventParams.CachedEventParam.ItemValue = this.activatableItemPool[_commandIndex];
			this.activatableItemPool[_commandIndex].FireEvent(MinEventTypes.onSelfItemActivate, MinEventParams.CachedEventParam);
			this.activatableItemPool[_commandIndex].Activated = 1;
			entityPlayer.bPlayerStatsChanged = true;
		}
		else
		{
			MinEventParams.CachedEventParam.ItemValue = this.activatableItemPool[_commandIndex];
			this.activatableItemPool[_commandIndex].FireEvent(MinEventTypes.onSelfItemDeactivate, MinEventParams.CachedEventParam);
			this.activatableItemPool[_commandIndex].Activated = 0;
			entityPlayer.bPlayerStatsChanged = true;
		}
		entityPlayer.inventory.CallOnToolbeltChangedInternal();
	}

	// Token: 0x06005B72 RID: 23410 RVA: 0x00282C24 File Offset: 0x00280E24
	public void SetupMenuData()
	{
		this.ResetRadialEntries();
		bool flag = GameStats.GetBool(EnumGameStats.IsCreativeMenuEnabled) || GamePrefs.GetBool(EnumGamePrefs.CreativeMenuEnabled);
		this.CreateRadialEntry(0, "ui_game_symbol_hammer", "UIAtlas", "", Localization.Get("xuiWPcrafting"), false);
		this.CreateRadialEntry(1, "ui_game_symbol_character", "UIAtlas", "", Localization.Get("xuiWPcharacter"), false);
		this.CreateRadialEntry(2, "ui_game_symbol_map", "UIAtlas", "", Localization.Get("xuiWPmap"), false);
		this.CreateRadialEntry(3, "ui_game_symbol_skills", "UIAtlas", "", Localization.Get("xuiWPskills"), false);
		this.CreateRadialEntry(4, "ui_game_symbol_quest", "UIAtlas", "", Localization.Get("xuiWPquests"), false);
		this.CreateRadialEntry(5, "ui_game_symbol_pen", "UIAtlas", "", Localization.Get("xuiWPjournal"), false);
		this.CreateRadialEntry(6, "ui_game_symbol_players", "UIAtlas", "", Localization.Get("xuiWPplayers"), false);
		if (flag)
		{
			this.CreateRadialEntry(7, "ui_game_symbol_lightbulb", "UIAtlas", "", Localization.Get("xuiWPcreative"), false);
		}
		if (EntityDrone.DebugModeEnabled)
		{
			this.CreateRadialEntry(8, "ui_game_symbol_drone", Localization.Get("entityJunkDrone"), "", "", false);
		}
		this.SetCommonData(UIUtils.ButtonIcon.FaceButtonWest, new XUiC_Radial.CommandHandlerDelegate(this.handleMenuCommand), null, -1, false, null);
	}

	// Token: 0x06005B73 RID: 23411 RVA: 0x00282D94 File Offset: 0x00280F94
	private void handleMenuCommand(XUiC_Radial _sender, int _commandIndex, XUiC_Radial.RadialContextAbs _context)
	{
		EntityPlayerLocal entityPlayer = _sender.xui.playerUI.entityPlayer;
		switch (_commandIndex)
		{
		case 0:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "crafting");
			return;
		case 1:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "character");
			return;
		case 2:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "map");
			return;
		case 3:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "skills");
			return;
		case 4:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "quests");
			return;
		case 5:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "journal");
			return;
		case 6:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "players");
			return;
		case 7:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "creative");
			return;
		case 8:
			if (entityPlayer.OwnedEntityCount > 0)
			{
				OwnedEntityData ownedEntityData = entityPlayer.GetOwnedEntities()[0];
				EntityDrone entityDrone = GameManager.Instance.World.GetEntity(ownedEntityData.Id) as EntityDrone;
				if (entityDrone)
				{
					entityDrone.startDialog(entityPlayer);
					return;
				}
			}
			break;
		default:
			XUiC_WindowSelector.OpenSelectorAndWindow(entityPlayer, "crafting");
			break;
		}
	}

private bool getBasicBlockInfo(out EntityPlayerLocal _epl, out ItemClassBlock.ItemBlockInventoryData _ibid, out Block _blockHolding, out Block _blockSelectedShape, out bool _hasAutoRotation, out bool _onlySimpleRotations, out bool _hasCopyRotation, out bool _allowShapes, out bool _hasCopyAutoShape, out bool _hasCopyShapeLegacy, out bool _allowPainting)
	{
		_hasAutoRotation = false;
		_onlySimpleRotations = false;
		_hasCopyRotation = false;
		_hasCopyAutoShape = false;
		_hasCopyShapeLegacy = false;
		_allowPainting = false;
		_epl = base.xui.playerUI.entityPlayer;
		Inventory inventory = _epl.inventory;
		_blockHolding = inventory.GetHoldingBlock().GetBlock();
		_ibid = (inventory.holdingItemData as ItemClassBlock.ItemBlockInventoryData);
		_allowShapes = _blockHolding.SelectAlternates;
		_blockSelectedShape = null;
		if (_blockHolding == null || _ibid == null)
		{
			return false;
		}
		_blockSelectedShape = (_allowShapes ? _blockHolding.GetAltBlock(_ibid.itemValue.Meta) : _blockHolding);
		_hasAutoRotation = (_blockSelectedShape.BlockPlacementHelper != BlockPlacement.None);
		_onlySimpleRotations = ((_blockSelectedShape.AllowedRotations & EBlockRotationClasses.Advanced) == EBlockRotationClasses.None);
		_hasCopyRotation = (_epl.HitInfo.bHitValid && !_epl.HitInfo.hit.blockValue.isair && _blockSelectedShape.SupportsRotation(_epl.HitInfo.hit.blockValue.rotation));
		if (_allowShapes && _epl.HitInfo.bHitValid)
		{
			Block block = _epl.HitInfo.hit.blockValue.Block;
			if (block.GetAutoShapeType() != EAutoShapeType.None && _blockHolding.AutoShapeSupportsShapeName(block.GetAutoShapeShapeName()))
			{
				_hasCopyAutoShape = true;
			}
			else if (_blockHolding.ContainsAlternateBlock(block.GetBlockName()))
			{
				_hasCopyShapeLegacy = true;
			}
		}
		_allowPainting = (_blockSelectedShape.shape is BlockShapeNew && _blockSelectedShape.MeshIndex == 0);
		return true;
	}

	// Token: 0x06005B75 RID: 23413 RVA: 0x00283010 File Offset: 0x00281210
	public void SetupBlockShapeData()
	{
		this.ResetRadialEntries();
		EntityPlayerLocal entityPlayerLocal;
		ItemClassBlock.ItemBlockInventoryData itemBlockInventoryData;
		Block block;
		Block block2;
		bool flag;
		bool flag2;
		bool flag3;
		bool flag4;
		bool flag5;
		bool flag6;
		bool flag7;
		if (!this.getBasicBlockInfo(out entityPlayerLocal, out itemBlockInventoryData, out block, out block2, out flag, out flag2, out flag3, out flag4, out flag5, out flag6, out flag7))
		{
			this.SetCommonData(UIUtils.ButtonIcon.FaceButtonNorth, new XUiC_Radial.CommandHandlerDelegate(this.handleBlockShapeCommand), null, -1, false, null);
			return;
		}
		if (flag4)
		{
			this.CreateRadialEntry(0, "ui_game_symbol_all_blocks", "UIAtlas", "", Localization.Get("xuiShape"), false);
			if (flag5 || flag6)
			{
				this.CreateRadialEntry(1, "ui_game_symbol_copy_shape", "UIAtlas", "", Localization.Get("xuiCopyShape"), false);
			}
		}
		this.CreateRadialEntry(2, "ui_game_symbol_rotate_simple", "UIAtlas", "", Localization.Get("xuiSimpleRotation"), false);
		if (!flag2)
		{
			this.CreateRadialEntry(3, "ui_game_symbol_rotate_advanced", "UIAtlas", "", Localization.Get("xuiAdvancedRotation"), false);
			this.CreateRadialEntry(4, "ui_game_symbol_rotate_on_face", "UIAtlas", "", Localization.Get("xuiOnFaceRotation"), false);
			if (flag)
			{
				this.CreateRadialEntry(5, "ui_game_symbol_rotate_auto", "UIAtlas", "", Localization.Get("xuiAutoRotation"), false);
			}
			if (flag3)
			{
				this.CreateRadialEntry(6, "ui_game_symbol_paint_copy_block", "UIAtlas", "", Localization.Get("xuiCopyRotation"), false);
			}
		}
		if (flag7 && (GameStats.GetBool(EnumGameStats.IsCreativeMenuEnabled) || GamePrefs.GetBool(EnumGamePrefs.CreativeMenuEnabled)))
		{
			this.CreateRadialEntry(7, "ui_game_symbol_paint_bucket", "UIAtlas", "", Localization.Get("xuiMaterials"), false);
		}
		this.SetCommonData(UIUtils.ButtonIcon.FaceButtonNorth, new XUiC_Radial.CommandHandlerDelegate(this.handleBlockShapeCommand), new XUiC_Radial.RadialContextHoldingSlotIndex(entityPlayerLocal.inventory.holdingItemIdx), -1, true, new XUiC_Radial.RadialStillValidDelegate(XUiC_Radial.RadialValidSameHoldingSlotIndex));
	}

private void handleBlockShapeCommand(XUiC_Radial _sender, int _commandIndex, XUiC_Radial.RadialContextAbs _context)
	{
		EntityPlayerLocal entityPlayerLocal;
		ItemClassBlock.ItemBlockInventoryData itemBlockInventoryData;
		Block block;
		Block block2;
		bool flag;
		bool flag2;
		bool flag3;
		bool flag4;
		bool flag5;
		bool flag6;
		bool flag7;
		if (!this.getBasicBlockInfo(out entityPlayerLocal, out itemBlockInventoryData, out block, out block2, out flag, out flag2, out flag3, out flag4, out flag5, out flag6, out flag7))
		{
			return;
		}
		switch (_commandIndex)
		{
		case -2:
		case 0:
			if (flag4)
			{
				base.xui.GetChildByType<XUiC_ShapesWindow>().ItemValue = entityPlayerLocal.inventory.holdingItemItemValue.Clone();
				base.xui.playerUI.windowManager.Open("shapes", true, false, true);
				return;
			}
			break;
		case -1:
			block2.RotateHoldingBlock(itemBlockInventoryData, false, true);
			return;
		case 1:
			if (flag5 || flag6)
			{
				Block block3 = entityPlayerLocal.HitInfo.hit.blockValue.Block;
				int num = flag5 ? block.AutoShapeAlternateShapeNameIndex(block3.GetAutoShapeShapeName()) : block.GetAlternateBlockIndex(block3.GetBlockName());
				if (num >= 0)
				{
					itemBlockInventoryData.itemValue.Meta = num;
					XUiC_Toolbelt childByType = ((XUiWindowGroup)base.xui.playerUI.windowManager.GetWindow("toolbelt")).Controller.GetChildByType<XUiC_Toolbelt>();
					if (childByType != null)
					{
						int holdingItemIdx = entityPlayerLocal.inventory.holdingItemIdx;
						XUiC_ItemStack slotControl = childByType.GetSlotControl(holdingItemIdx);
						slotControl.ItemStack = new ItemStack(itemBlockInventoryData.itemValue, itemBlockInventoryData.itemStack.count);
						slotControl.ForceRefreshItemStack();
						return;
					}
				}
			}
			break;
		case 2:
			itemBlockInventoryData.mode = BlockPlacement.EnumRotationMode.Simple;
			return;
		case 3:
			if (!flag2)
			{
				itemBlockInventoryData.mode = BlockPlacement.EnumRotationMode.Advanced;
				return;
			}
			break;
		case 4:
			if (!flag2)
			{
				itemBlockInventoryData.mode = BlockPlacement.EnumRotationMode.ToFace;
				return;
			}
			break;
		case 5:
			if (!flag2 && flag)
			{
				itemBlockInventoryData.mode = BlockPlacement.EnumRotationMode.Auto;
				return;
			}
			break;
		case 6:
			if (!flag2 && flag3)
			{
				BlockValue blockValue = entityPlayerLocal.HitInfo.hit.blockValue;
				if (blockValue.ischild)
				{
					blockValue = entityPlayerLocal.world.GetBlock(blockValue.Block.multiBlockPos.GetParentPos(entityPlayerLocal.HitInfo.hit.blockPos, blockValue));
				}
				itemBlockInventoryData.rotation = blockValue.rotation;
				itemBlockInventoryData.mode = BlockPlacement.EnumRotationMode.Advanced;
				return;
			}
			break;
		case 7:
			base.xui.playerUI.windowManager.Open("materials", true, false, true);
			break;
		default:
			return;
		}
	}

private List<XUiC_RadialEntry> menuItem;

	// Token: 0x04003C97 RID: 15511
	private bool[] menuItemState;

	// Token: 0x04003C98 RID: 15512
	private int selectedIndex;

	// Token: 0x04003C99 RID: 15513
	private bool hasSpecialActionPriorToRadialVisibility;

	// Token: 0x04003C9A RID: 15514
	private XUiC_Radial.RadialContextAbs context;

	// Token: 0x04003C9B RID: 15515
	private UIUtils.ButtonIcon selectionControllerButton;

	// Token: 0x04003C9C RID: 15516
	private XUiC_Radial.CommandHandlerDelegate commandHandler;

	// Token: 0x04003C9D RID: 15517
	private XUiC_Radial.RadialStillValidDelegate validCheckDelegate;

	// Token: 0x04003C9E RID: 15518
	private bool isOpenRequested;

	// Token: 0x04003C9F RID: 15519
	private float displayDelay = 0.4f;

	// Token: 0x04003CA0 RID: 15520
	private float openTime;

	// Token: 0x04003CA1 RID: 15521
	private XUiC_RadialEntry mCurrentlySelectedEntry;

	// Token: 0x04003CA2 RID: 15522
	private const float cRadialSelectedScale = 1.5f;

	// Token: 0x04003CA3 RID: 15523
	private bool showingCallouts;

	// Token: 0x04003CA4 RID: 15524
	private XUiV_Label selectionText;

	// Token: 0x04003CA5 RID: 15525
	private List<ItemValue> activatableItemPool = new List<ItemValue>();

	// Token: 0x02001231 RID: 4657
	// (Invoke) Token: 0x06009D63 RID: 40291
	public delegate void CommandHandlerDelegate(XUiC_Radial _xuiRadial, int _commandIndex, XUiC_Radial.RadialContextAbs _context);

	// Token: 0x02001232 RID: 4658
	// (Invoke) Token: 0x06009D67 RID: 40295
	public delegate bool RadialStillValidDelegate(XUiC_Radial _xuiRadial, XUiC_Radial.RadialContextAbs _context);

	// Token: 0x02001233 RID: 4659
	public class RadialContextAbs
	{
	}

	// Token: 0x02001234 RID: 4660
	public class RadialContextHoldingSlotIndex : XUiC_Radial.RadialContextAbs
	{
		// Token: 0x06009D6B RID: 40299 RVA: 0x003FE70C File Offset: 0x003FC90C
		public RadialContextHoldingSlotIndex(int _itemSlotIndex)
		{
			this.ItemSlotIndex = _itemSlotIndex;
		}

		// Token: 0x04007B06 RID: 31494
		public readonly int ItemSlotIndex;
	}

	// Token: 0x02001235 RID: 4661
	public class RadialContextBlock : XUiC_Radial.RadialContextAbs
	{
		// Token: 0x06009D6C RID: 40300 RVA: 0x003FE71B File Offset: 0x003FC91B
		public RadialContextBlock(Vector3i _blockPos, int _clusterIdx, BlockValue _blockValue, EntityAlive _entityFocusing, BlockActivationCommand[] _commands)
		{
			this.BlockPos = _blockPos;
			this.ClusterIdx = _clusterIdx;
			this.BlockValue = _blockValue;
			this.EntityFocusing = _entityFocusing;
			this.Commands = _commands;
		}

		// Token: 0x04007B07 RID: 31495
		public readonly Vector3i BlockPos;

		// Token: 0x04007B08 RID: 31496
		public readonly int ClusterIdx;

		// Token: 0x04007B09 RID: 31497
		public readonly BlockValue BlockValue;

		// Token: 0x04007B0A RID: 31498
		public readonly EntityAlive EntityFocusing;

		// Token: 0x04007B0B RID: 31499
		public readonly BlockActivationCommand[] Commands;
	}

	// Token: 0x02001236 RID: 4662
	public class RadialContextEntity : XUiC_Radial.RadialContextAbs
	{
		// Token: 0x06009D6D RID: 40301 RVA: 0x003FE748 File Offset: 0x003FC948
		public RadialContextEntity(Vector3i _blockPos, EntityAlive _entityFocusing, Entity _entityFocused)
		{
			this.BlockPos = _blockPos;
			this.EntityFocusing = _entityFocusing;
			this.EntityFocused = _entityFocused;
		}

		// Token: 0x04007B0C RID: 31500
		public readonly Vector3i BlockPos;

		// Token: 0x04007B0D RID: 31501
		public readonly EntityAlive EntityFocusing;

		// Token: 0x04007B0E RID: 31502
		public readonly Entity EntityFocused;
	}
}
